#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Prototipação das funções
int abrir_menu_principal();
void exibir_opcoes_menu_principal();
void cadastros();
void cadastrar_novo_cliente();
void cadastrar_novo_produto();
float abrir_caixa();
void atualiza_estoque_abertura();
void fechar_caixa();
float calcula_valor_produtos();
int exibir_opcoes();
float abrir_menu_categoria();
void efetuar_pagamentos();
void efetuar_pagamento_dinheiro();
void efetuar_pagamento_cartao();
void exibir_venda_produto_categoria();
void listar_cliente();
void liberar_lista_clientes();
void iniciar_venda();
void exibir_Produtos_Disponives();
void menu_venda();
void Nova_Venda();
void exibir_carrinho();
void adicionarAoCarrinho(Carrinho *carrinho, Produto *produto, int quantidade);

typedef struct Cliente {
    int codigo;
    char nome_completo[51];
    char nome_social[51];
    char cpf[15];
    char email[51];
    char rua_numero[100];
    char bairro[51];
    char celular[21];
    struct itemCarrinho *carrinho;
    struct Cliente *proximo; // ponteiro para o próximo cliente
} Cliente;

typedef struct Produto{
    int  Codigo;
    char nome[100];
    char categoria[30];
    float preco;
    int estoque;
    struct Produto *proximo;
    } Produto ;

typedef struct itemCarrinho{
    Produto *produto;
    int quantidade;
    struct itemCarrinho *proximo;
    } itemCarrinho;

typedef struct{
    itemCarrinho *inicio;
    float total;
    }Carrinho;
    
    Cliente *inicio_cliente = NULL;
    Produto *inicio_produto = NULL;
    Cliente* selecionar_cliente();
    

int abrir_menu_principal() {
    int opcao = 0;
    do {
        exibir_opcoes_menu_principal();
        printf("\n\Digite a opção desejada de [1] a [7]\n-->");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("\n\n\t           --> Opção de |CADASTRO| selecionado! <--\n\n\n");
                cadastros();
                break;

            case 2: {//NOVA VENDA
                printf("\n\n--> Opção |VENDAS| selecionado! <--\n\n\n");
                Cliente* cliente = selecionar_cliente();
                    if(cliente==NULL){
                    printf("-----------!!!Não é possível iniciar venda sem Cliente!!!---------\n\n");
                    iniciar_venda();
                    break;
                    }
                    break;
                }

            case 3:
                printf("\n\n--> Opção |ABRIR| caixa! <--\n\n\n");
                break;

            case 4:
                printf("\n\n--> Opção |FECHAR| caixa!<--\n\n\n");
                break;

            case 5:
                printf("\n\n--> Opção de |RELATÓRIOS| Disponível! <--\n\n\n");
                break;

            case 7:
                printf("\n\n\n[✓][✓] Saindo do Sistema... Até mais! [✓][✓]\n\n\n");
                break;

            default:
                printf("\n\n[×][×] Opção Inválida! Tente novamente. [×][×]\n\n\n");
                break;
        }
    } while (opcao != 7); // Corrigi para sair na opção 7 (não era 4!)

    return 0;
}

void exibir_opcoes_menu_principal() {
    printf("          \t\t  _____________ \n");
    printf("     \t\t   _________|LOJA|_________ \n");
    printf("  \t\t _____________| DA |______________\n");
    printf(" \t\t_______________|BERE|__________________\n");
    printf("\t\t_______________________________________\n");
    printf("\t\t| [1] -> Cadastro                     |\n");
    printf("\t\t| [2] -> Vendas                       |\n");
    printf("\t\t| [3] -> Abrir Caixa                  |\n"); // Corrigi "Abir"
    printf("\t\t| [4] -> Fechar Caixa                 |\n");
    printf("\t\t| [5] -> Relatório                    |\n");
    printf("\t\t| [7] -> Sair                         |\n");
    printf("\t\t_______________________________________\n\n");

    printf("\t\t             ___________________\n");
    printf("\t\t _____________SEJA BEM VINDO(A)________\n");
    printf("\t\t             __________________\n\n");
}

void cadastros() {
    int opcao_cadastro = 0;

    do {
        printf("\n\t\t______________MENU DE CADASTROS___________\n");
        printf("\t\t| [1] -> CADASTRO CLIENTES                |\n");
        printf("\t\t| [2] -> CADASTRO PRODUTOS                |\n");
        printf("\t\t| [3] -> VOLTAR PARA MENU                 |\n");
        printf("\t\t|_________________________________________|\n");

        printf("Digite uma opção\n-->");
        scanf("%d", &opcao_cadastro);

        switch (opcao_cadastro) {
            case 1:
                printf("\n\nCadastrando um novo Cliente.... process..\n\n");
                cadastrar_novo_cliente();
                break;

            case 2:
                printf("\nCadastrando novo Produto....\n");
                cadastrar_novo_produto();
                break;

            case 3:
                printf("\n\tVoltando para menu principal...\n\n\n");
                break;

            default:
                printf("\n Opção inválida! Tente novamente\n");
                break;
        }
    } while (opcao_cadastro != 3);
}

   // ============================C L I E N T E==============================//

void cadastrar_novo_cliente() {
    Cliente *novo_cliente = (Cliente *)malloc(sizeof(Cliente)); // Aloca memória pra novo cliente
    static int contador_codigo=1;

    if (novo_cliente == NULL) {
        printf("Erro ao alocar memória para novo cliente!\n");
        return;
    }

    novo_cliente->codigo=contador_codigo++;
    novo_cliente->carrinho=NULL;

    printf("\n__________CADASTRO DE NOVO CLIENTE______________\n");
    printf("|Digite nome completo do cliente:\n|-->");
    getchar(); // Limpa buffer
    fgets(novo_cliente->nome_completo, sizeof(novo_cliente->nome_completo), stdin);
    novo_cliente->nome_completo[strcspn(novo_cliente->nome_completo, "\n")] = '\0'; // Remove \n

    printf("|Digite nome social:\n|-->");
    fgets(novo_cliente->nome_social, sizeof(novo_cliente->nome_social), stdin);
    novo_cliente->nome_social[strcspn(novo_cliente->nome_social, "\n")] = '\0';

    printf("|Digite CPF do cliente:\n|-->");
    fgets(novo_cliente->cpf, sizeof(novo_cliente->cpf), stdin);
    novo_cliente->cpf[strcspn(novo_cliente->cpf, "\n")] = '\0';

    printf("|Digite E-mail do cliente:\n|-->");
    fgets(novo_cliente->email, sizeof(novo_cliente->email), stdin);
    novo_cliente->email[strcspn(novo_cliente->email, "\n")] = '\0';

    printf("| Digite Nome da rua e o N°:\n|-->");
    fgets(novo_cliente->rua_numero, sizeof(novo_cliente->rua_numero), stdin);
    novo_cliente->rua_numero[strcspn(novo_cliente->rua_numero, "\n")] = '\0';

    printf("| Digite Nome do Bairro:\n|-->");
    fgets(novo_cliente->bairro, sizeof(novo_cliente->bairro), stdin);
    novo_cliente->bairro[strcspn(novo_cliente->bairro, "\n")] = '\0';

    printf("| Digite número de Celular :\n|-->");
    fgets(novo_cliente->celular, sizeof(novo_cliente->celular), stdin);
    novo_cliente->celular[strcspn(novo_cliente->celular, "\n")] = '\0';


    printf("|_____________________________________________\n\n");

    novo_cliente->proximo = inicio_cliente; // Insere na cabeça da lista
    inicio_cliente = novo_cliente;

    printf("\t\t_______________________________");
    printf("\n\t\t|Cliente cadastrado com Sucesso!\n\t\t|");
    printf("\n\t\t| Nome Completo: %s\n", novo_cliente->nome_completo);
    printf("\t\t| Nome Social: %s\n", novo_cliente->nome_social);
    printf("\t\t| CPF: %s\n", novo_cliente->cpf);
    printf("\t\t| E-mail: %s\n", novo_cliente->email);
    printf("\t\t| Nome da Rua e N°: %s\n", novo_cliente->rua_numero);
    printf("\t\t| Bairro: %s\n", novo_cliente->bairro);
    printf("\t\t| Celular: %s\n", novo_cliente->celular);
    printf("\t\t|________________________________________\n\n");
}
    Cliente* selecionar_cliente(){
    int codigo;
    Cliente *atual=inicio_cliente;

        printf("\n Digite o Código do cliente:\n-->");
        scanf("%d", &codigo);

        while(atual!=NULL){
            if(atual->codigo==codigo){
                printf("\n---------Cliente encontrado--------");
                printf("\n___________________________");
                printf("\n|Nome:%s", atual->nome_completo);
                printf("\n|CPF:%s", atual->cpf);
                printf("\n________________________________\n\n");
                return atual;
            }
           atual=atual->proximo;
        }

        printf("Cliente com codigo %d não encontrado\n", codigo);

        return NULL;
    }


void listar_cliente() {
    Cliente *atual = inicio_cliente;

    if (atual == NULL) {
        printf("Nenhum cliente cadastrado!\n");
        return;
    }

    printf("\nLista de Clientes:\n");
    while (atual != NULL) {
        printf("Nome: %s\n", atual->nome_completo);
        printf(" Nome: %s\n", atual->nome_social);
        printf("CPF: %s\n", atual->cpf);
        printf("E-mail: %s\n", atual->email);
        printf("Rua e Número: %s\n", atual->rua_numero);
        printf("Bairro:%s\n", atual->bairro);
        printf("Celular:%s\n", atual->celular);
        atual = atual->proximo; // Move para o próximo!
    }
}

void liberar_lista_clientes() {
    Cliente *atual = inicio_cliente;
    Cliente *temp;

    while (atual != NULL) {
        temp = atual;
        atual = atual->proximo;
        free(temp); // Libera a memória do cliente
    }
}


//=====================F I M - C L I E N T E ===========================//

//=========================P R O D U T O=============================//
void cadastrar_novo_produto() {

    Produto *novo=(Produto *)malloc(sizeof(Produto));
    if(novo==NULL){
    printf("Erro ao alocar memória\n");
    return;
    }

    printf("\n___________CADASTRO NOVO PRODUTO_________\n");
    getchar(); // Limpa buffer do scanf anterior
    printf("| Digite o nome do produto:\n|-->");
    fgets(novo->nome, sizeof(novo->nome), stdin);
    novo->nome[strcspn(novo->nome, "\n")] = '\0'; // Remove \n

    do{
        printf("| Digite o preço do produto:\n|-->");
        scanf("%f", &novo->preco);
        if(novo->preco<0){
            printf("\n->Preço inválido, Digite um número positivo!!!<-\n");
        }
    } while(novo->preco<0);

    do{
        printf("| Digite a quantidade em estoque:\n|-->");
        scanf("%d", &novo->estoque);
        if(novo->estoque<0){
            printf("\n->Estoque Insuficiente, Digite um Número válido!<-\n\n");
        }
    }while(novo->estoque<0);

    printf("|_________________________________________\n");
    novo->proximo = inicio_produto;
    inicio_produto=novo;

    printf("\t\t________________________________");
    printf("\n\t\t|Produto cadastrado com Sucesso!|\n\t\t|\t\t\t\t|\n");

    printf("\t\t| Produto: %s\t\t\t|\n", novo->nome);
    printf("\t\t| Preço R$%.2f\t\t\t|\n", novo->preco);
    printf("\t\t| Estoque: %d unidades\t\t|\n", novo->estoque);
    printf("\t\t|_______________________________|\n\n");
    }
    
void exibir_carrinho(Codigo *codigo){
    printf("\nCODIGO PRODUTO  CATEGORIA  PRECO     ESTOQUE ");
    
        
}
//====================== F I M - P R O D U T O ======================//

//========================= C A R R I N H O ========================//

    Carrinho* criar_carrinho(){ 
    Carrinho *carrinho=(Carrinho*)malloc(sizeof(Carrinho));
    carrinho->inicio=NULL;
    carrinho->total=0.0;
    return carrinho;
    }
    
void adicionarAoCarrinho(Carrinho *carrinho, Produto *produto, int quantidade){
    if(produto==NULL || quantidade <=0) return;
    
    if(produto->estoque<quantidade){
        printf("Estoque Insuficiente para o produto: %s\n ", produto->nome);
        return ;
    }
    
    itemCarrinho *novo=(itemCarrinho*)malloc(sizeof(itemCarrinho));
    novo->produto= produto;
    novo->quantidade= quantidade;
    novo->proximo= carrinho->inicio;
    carrinho->inicio=novo;
    
    carrinho->total+=produto->preco *quantidade;
    
    printf("%d x %s Adicionados ao carrinho\n", quantidade, produto->nome);
    }
    Produto* buscar_produto(char *nome){
        Produto *p= inicio_produto;
        while(p != NULL){
            if(strcmp(p->nome, nome) == 0){
                return p;
            }
            p = p->proximo;
        }
        return NULL;
    }
    
void exibir_carrinho(Carrinho *carrinho) {
    if (carrinho == NULL || carrinho->inicio == NULL) {
        printf("\n[CARRINHO VAZIO]\n");
        return;
    }

    printf("\n\n============= CARRINHO DE COMPRAS =============\n");
    itemCarrinho *atual = carrinho->inicio;
    int item = 1;
    while (atual != NULL) {
        float subtotal = atual->quantidade * atual->produto->preco;
        printf("[%d] %dx %s | R$ %.2f cada | Subtotal: R$ %.2f\n",
               item, atual->quantidade, atual->produto->nome,
               atual->produto->preco, subtotal);
        atual = atual->proximo;
        item++;
    }
    printf("-----------------------------------------------\n");
    printf("TOTAL: R$ %.2f\n", carrinho->total);
    printf("===============================================\n\n");
}

//================================================

void menu_venda(){
    int opcaoVenda;
    
    do{
    printf("\n_________MENU DE VENDA_________\n");
    printf("2.1-Nova venda\n");
    printf("2.2-Retirada de vaixa (Sangria)\n");
    printf("2.3-Pagamento\n");
    printf("2.4 Voltar para menu Principal\n");
    prjnf("Escolha uma Opção\n-->");
    scanf("%d", &opcaoVenda);
    
    switch(opcaoVenda){
        case 1: 
            Nova_Venda();
            break;
        case 2:
            retirada_Caixa();
            break;
        case 3:
            efetuar_pagamentos();
            break;     
        case 4: 
            printf("Retornando ao Menu Principal\n");
            break;
        default: 
            printf("Opção Invalida!!!");
            break;

         }
    }while(opcaoVenda != 4);

}

void exibir_Produtos_Disponives(){
    printf("\n____________________________________________________");
    printf("\n|COD \t Descrição \t Categoria \t Preço \t Estoque\n ");
    printf("____________________________________________________\n");

    Produto *p=inicio_produto;
    while(p!= NULL){
    printf("%-5d %-25s %-20s R$%-7.2f %-8d\n",
        p->Codigo,
        p->nome,
        p->categoria,
        p->preco,
        p->estoque);
        
    p=p->proximo;
    }
    
}
    
    
    
void Nova_Venda(){
    int Codigo,quantidade;
    char continuar;
    
    printf("\n__________Nova venda_________\n");
    exibir_Produtos_Disponives();
    
    do{
    printf("\nInforme o Codigo do produto desejado\n-->");
    scanf("%d", &Codigo);
    
    Produto *prod=buscar_produto_por_codigo(Codigo);
    if(!prod){
        printf("\nCodigo Inválido! Tente Novamente.\n");
        continue;
    }
    printf("\nInforme a quantidade\n-->");
    scanf("%d", &quantidade);
    
    adicionarAoCarrinho(Codigo,quantidade);
    
    printf("Novo item ao carrinho de compra(S/N)?");
    scanf("%c", &continuar);
    
    }while(continuar == 'S' || continuar == 'N');
}

    Produto *buscar_produto_por_codigo( Codigo){
    Produto *p=inicio_produto;
    while(p){
        if(p->Codigo == Codigo) return p;
        p=p->proximo;
        }
        return NULL;
      
    }
    
    
void iniciar_venda() {
    Cliente *cliente = selecionar_cliente();
    if (cliente == NULL) return;

    Carrinho *carrinho = criar_carrinho();
    char nome_produto[100];
    int quantidade;

    while (1) {
        printf("\nDigite o nome do produto (ou 'fim' para finalizar): ");
        getchar(); // limpar buffer
        fgets(nome_produto, sizeof(nome_produto), stdin);
        nome_produto[strcspn(nome_produto, "\n")] = '\0';

        if (strcmp(nome_produto, "fim") == 0) break;

        Produto *produto = buscar_produto(nome_produto);
        if (produto == NULL) {
            printf("Produto não encontrado!\n");
            continue;
        }

        printf("Digite a quantidade: ");
        scanf("%d", &quantidade);

        adicionarAoCarrinho(carrinho, produto, quantidade);
    }

    printf("\nResumo da compra:\n");
    itemCarrinho *item = carrinho->inicio;
    while (item != NULL) {
        printf("- %d x %s = R$ %.2f\n", item->quantidade, item->produto->nome,
               item->quantidade * item->produto->preco);
        item = item->proximo;
    }

    printf("Total a pagar: R$ %.2f\n", carrinho->total);

    // Simples pagamento fictício
    float valor_pago;
    do {
        printf("Digite o valor pago: ");
        scanf("%f", &valor_pago);
        if (valor_pago < carrinho->total) {
            printf("Valor insuficiente!\n");
        }
    } while (valor_pago < carrinho->total);

    printf("Troco: R$ %.2f\n", valor_pago - carrinho->total);

    // Atualiza estoque
    item = carrinho->inicio;
    while (item != NULL) {
        item->produto->estoque -= item->quantidade;
        item = item->proximo;
    }

    printf("Venda finalizada com sucesso!\n");

    // Libera carrinho
    while (carrinho->inicio != NULL) {
        itemCarrinho *tmp = carrinho->inicio;
        carrinho->inicio = carrinho->inicio->proximo;
        free(tmp);
    }
    free(carrinho);
}

int main() {
    abrir_menu_principal();
    liberar_lista_clientes();
    return 0;
}